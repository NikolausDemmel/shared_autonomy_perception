<launch>

  <!-- namespace for the camera that we're listening to. 
  Can't push the openni_launch down into another namespace, so we use this-->
  <arg name="kinect_name" default="/head_mount_kinect"/>
  <!-- services that the interactive segmentation uses -->
  <arg name="segment_service" default="segment_service"/>
  <arg name="bbox_service" default="get_bounding_box"/>
  <arg name="pixel_service" default="edit_pixel_labels"/>

  <!-- the kinect's depth and rgb images are not published synchronously.
  This gathers them and provides a service to obtain the most recent set.
  TODO: I'm not sure that this mapping is ideal, but it seems to match what
  openni_kinect does -->

  <node name="assemble_kinect" pkg="assemble_kinect" type="assemble_kinect" output="screen">
    <remap from="camera/rgb/image_color" to="$(arg kinect_name)/rgb/image_color"/>
    <remap from="camera/depth_registered/image" to="$(arg kinect_name)/depth_registered/image_raw"/>
    <remap from="camera/depth_registered/camera_info" to="$(arg kinect_name)/depth_registered/camera_info"/>
    <remap from="camera/depth_registered/points" to="$(arg kinect_name)/depth_registered/points"/>
    <remap from="camera/assemble_kinect" to="$(arg kinect_name)/assemble_kinect"/>
  </node>

  <!-- This handles the interactive segmentation of objects -->
  <node name="grabcut3d_segmentation_node" pkg="grabcut3d_segmentation" type="grabcut3d_segmentation_node" output="screen">
    <remap from="segment_service" to="$(arg segment_service)"/>
    <remap from="bbox_service" to="$(arg bbox_service)"/>
    <remap from="pixel_service" to="$(arg pixel_service)"/>
    <param name="loop_rate" value="5.0"/>
    <param name="preempt_wait" value="10.0"/>
    <param name="connect_wait" value="60.0"/>
    <param name="grabcut_iters" value="10"/>
    <param name="min_range" value="0.25"/>
    <param name="max_range" value="3.0"/>
    <param name="click_radius" value="20"/>
    <param name="depth_interpolation_radius" value="10.0"/>
  </node>

  <!-- Implements the Interactive Marker server and all the actionlib services
  that the segmentation node depends on 
  TODO: what's the correct way to make the InteractiveMarkerService topic namespace
  configurable? I can remap all three topics, or is there something better?-->
  <node name="HMI" pkg="im_hmi" type="im_hmi.py">
    <remap from="bbox_service" to="$(arg bbox_service)"/>
    <remap from="pixel_service" to="$(arg pixel_service)"/>
    <param name="loop_rate" value="5.0"/>
    <param name="ppm" value="100"/>
  </node>



</launch>